{
  "src": "~/users/xieyuheng/public/contents/the-reasoned-schemer.mimor",
  "@path": "users/xieyuheng/recall/2b2c1345a1c613e695bf41b48329c1be4d078c5047d994fd44183ff9d530ec74",
  "@revision": "bad8d15ca14d9117e07b176fd304c483",
  "@createdAt": 1688544629626,
  "@updatedAt": 1688548670927,
  "text": "<metadata theme-color=\"orange\" />\n\n<question>\n  What is a goal?\n\n  <answer>\n    It is something that either succeeds, fails, or has no value.\n  </answer>\n</question>\n\n<question>\n  What is a fresh variable?\n\n  <answer>\n    Every variable is initially fresh.\n\n    A variable is no longer fresh\n    if it becomes associated with a non-variable value\n    or if it becomes associated with a variable that,\n    itself, is no longer fresh.\n  </answer>\n</question>\n\n<question>\n  When are two variables different?\n\n  <answer>\n    Two variables are different if they have not been fused.\n\n    Every variable introduced by fresh (or run*)\n    is initially different from every other variable.\n  </answer>\n</question>\n\n<question>\n  What does it mean for x to occur?\n\n  <answer>\n    A variable x occurs in a variable y\n    when x (or any variable fused with x)\n    appears in the value associated with y.\n  </answer>\n</question>\n\n<question>\n  When do we say a variable occurs in a list?\n\n  <answer>\n    A variable x occurs in a list l\n    when x (or any variable fused with x) is an element of l,\n    or when x occurs in an element of l.\n  </answer>\n</question>\n\n<question>\n  What is a relation?\n\n  <answer>\n    A relation is a kind of function that,\n    when given arguments, produces a goal.\n\n    Thanks, Robert A. Kowalski (1941 --).\n  </answer>\n</question>\n\n<question>\n  The Second Law of unify\n\n  <answer>\n    If x is fresh, then\n\n    <code>\n      v = x\n    </code>\n\n    succeeds and associates v with x,\n    unless x occurs in v.\n  </answer>\n</question>\n\n<question>\n  The First Law of unify\n\n  <answer>\n    <code>\n      v = w\n    </code>\n\n    can be replaced by\n\n    <code>\n      w = v\n    </code>\n  </answer>\n</question>\n\n<question>\n  What does the \"e\" in conde stand for?\n\n  <answer>\n    It stands for every,\n    since every successful conde line\n    contributes one or more values (to the solution).\n  </answer>\n</question>\n\n<question>\n  How do we translate a function into a relation?\n\n  <answer>\n    The Translation (Initial)\n\n    To translate a function into a relation,\n    first replace define with defrel.\n\n    Then unnest each expression in each cond line,\n    and replace each cond with conde.\n\n    To unnest a #t, replace it with #s.\n\n    To unnest a #f, replace it with #u.\n  </answer>\n</question>\n\n<question>\n  The Law of #u (fail)\n\n  <answer>\n    Any conde line that has #u as a top-level goal cannot contribute values.\n  </answer>\n</question>\n\n<question>\n  The Law of #s (success)\n\n  <answer>\n    Any top-level #s can be removed from a conde line.\n  </answer>\n</question>\n\n<question>\n  How do we translate a function into a relation?\n\n  <answer>\n    The Translation (Final)\n\n    To translate a function into a relation,\n    first replace define with defrel.\n\n    Then unnest each expression in each cond line,\n    and replace each cond with conde.\n\n    To unnest a #t, replace it with #s.\n\n    To unnest a #f, replace it with #u.\n\n    If the value of at least one cond line can be a non-Boolean,\n    add an argument, say out, to defrel to hold\n    what would have been the function's value.\n\n    When unnesting a line whose value is not a Boolean,\n    ensure that either some value is associated with out,\n    or that out is the last argument to a recursion.\n  </answer>\n</question>\n\n<question>\n  The First Commandment\n\n  <answer>\n    Within each sequence of goals,\n    move non-recursive goals before recursive goals.\n  </answer>\n</question>\n\n<question>\n  The Law of Swapping conde Lines\n\n  <answer>\n    Swapping two conde lines\n    does not affect the values contributed by conde.\n  </answer>\n</question>\n\n<question>\n  When can we rearrange these cond lines in any order?\n\n  <answer>\n    When the cond questions satisfy the non-overlapping property.\n  </answer>\n</question>\n",
  "createdAt": 1688544629626,
  "updatedAt": 1688544629626,
  "history": {
    "1688548670844": {
      "statistics": {
        "trace": [
          { "kind": "Remembered", "index": 0, "time": 1688548651634 },
          { "kind": "Remembered", "index": 1, "time": 1688548651963 },
          { "kind": "Remembered", "index": 2, "time": 1688548652262 },
          { "kind": "Remembered", "index": 3, "time": 1688548652550 },
          { "kind": "Remembered", "index": 4, "time": 1688548652840 },
          { "kind": "Remembered", "index": 5, "time": 1688548653130 },
          { "kind": "Remembered", "index": 6, "time": 1688548653446 },
          { "kind": "Remembered", "index": 7, "time": 1688548657340 },
          { "kind": "Forgotten", "index": 8, "time": 1688548658313 },
          { "kind": "Forgotten", "index": 9, "time": 1688548658591 },
          { "kind": "Forgotten", "index": 10, "time": 1688548658892 },
          { "kind": "Remembered", "index": 11, "time": 1688548661089 },
          { "kind": "Remembered", "index": 12, "time": 1688548662361 },
          { "kind": "Remembered", "index": 13, "time": 1688548664697 },
          { "kind": "Remembered", "index": 14, "time": 1688548665120 },
          { "kind": "Remembered", "index": 15, "time": 1688548666151 },
          { "kind": "Remembered", "index": 8, "time": 1688548667841 },
          { "kind": "Remembered", "index": 9, "time": 1688548670018 },
          { "kind": "Remembered", "index": 10, "time": 1688548670829 }
        ],
        "startedAt": 1688548649900,
        "endedAt": 1688548670841,
        "duration": 20941,
        "forgettingRate": 0.1875
      }
    }
  },
  "sessionHistory": {
    "1688548670844": {
      "statistics": {
        "trace": [
          { "kind": "Remembered", "index": 0, "time": 1688548651634 },
          { "kind": "Remembered", "index": 1, "time": 1688548651963 },
          { "kind": "Remembered", "index": 2, "time": 1688548652262 },
          { "kind": "Remembered", "index": 3, "time": 1688548652550 },
          { "kind": "Remembered", "index": 4, "time": 1688548652840 },
          { "kind": "Remembered", "index": 5, "time": 1688548653130 },
          { "kind": "Remembered", "index": 6, "time": 1688548653446 },
          { "kind": "Remembered", "index": 7, "time": 1688548657340 },
          { "kind": "Forgotten", "index": 8, "time": 1688548658313 },
          { "kind": "Forgotten", "index": 9, "time": 1688548658591 },
          { "kind": "Forgotten", "index": 10, "time": 1688548658892 },
          { "kind": "Remembered", "index": 11, "time": 1688548661089 },
          { "kind": "Remembered", "index": 12, "time": 1688548662361 },
          { "kind": "Remembered", "index": 13, "time": 1688548664697 },
          { "kind": "Remembered", "index": 14, "time": 1688548665120 },
          { "kind": "Remembered", "index": 15, "time": 1688548666151 },
          { "kind": "Remembered", "index": 8, "time": 1688548667841 },
          { "kind": "Remembered", "index": 9, "time": 1688548670018 },
          { "kind": "Remembered", "index": 10, "time": 1688548670829 }
        ],
        "startedAt": 1688548649900,
        "endedAt": 1688548670841,
        "duration": 20941,
        "forgettingRate": 0.1875
      }
    }
  }
}
